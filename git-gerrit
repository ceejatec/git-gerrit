#!/bin/bash

# Where to store our private working information
DATADIR=.git/gerrit-submit

usage()
{
    echo "Usage: git gerrit init [-u <gerrit URL>] [-p <project name>]"
    echo "       git gerrit update [-b <target branch>]"
    echo "       git gerrit submit [-b <target branch>] [-d]"
    echo "       git gerrit new"
    exit
}

cd_to_root()
{
    cd `git rev-parse --git-dir`/..
}

get_upstream()
{
    git rev-parse --abbrev-ref @{upstream} 2> /dev/null || echo master
}

gerrit_init()
{
    cd_to_root

    while getopts "p:u:" OPTION
    do
        case $OPTION in
            p)
                project=$OPTARG
                ;;
            u)
                url=$OPTARG
                ;;
        esac
    done

    # Determine base URL
    if test -z "$url"
    then
        url=`git config --get gerrit.url`
        if test -z "$url"
        then
            echo -n "Gerrit URL not specified! "
            echo "You may use 'git gerrit init -u <gerrit URL>'"
            echo -n "or you may set the default with "
            echo "'git config --global gerrit.url <gerrit URL>'"
            exit 1
        fi
    else
        shift
    fi

    # Determine project name
    if test -z "$project"
    then
        project=`basename $(git ls-remote --get-url origin)`
        if test "$project" = "origin"
        then
            echo "Cannot determine project based on origin URL - please use "
            echo "'get gerrit init -p <project name>'"
            exit 1
        fi
    fi

    # Delete gerrit remote if one already exists
    if test "`git ls-remote --get-url gerrit`" != "gerrit"
    then
        git remote remove gerrit
    fi

    # Add remote
    git remote add gerrit "${url%%/}/${project}"

    # Create data directory
    mkdir -p $DATADIR
}

gerrit_update()
{
    cd_to_root

    # Determine target branch
    target=$(get_upstream)
    mergeop=rebase
    while getopts "b:m" OPTION
    do
        case $OPTION in
            b)
                target=$OPTARG
                ;;
            m)
                mergeop=merge
                ;;
            r)
                mergeop=rebase
                ;;
        esac
    done

    # Ensure current branch has no uncommitted changes
    git diff-index --quiet HEAD || {
        echo -n "Your current branch has uncommitted changes; please commit all "
        echo "before merging"
        exit
    }

    # Determine current working branch
    branch=`git rev-parse --abbrev-ref HEAD`

    echo "Updating local $target (should always succeed)..."
    git checkout $target
    git pull --ff-only || {
        echo -n "Failed to update local $target! Resolve conflicts there..."
        exit 1
    }
    echo "Merging local $target onto working branch..."
    git checkout $branch
    if [ "$mergeop" = "rebase" ]
    then
        git rebase $target
    else
        git merge -m "Merge from master" --log --no-edit $target
    fi
}

get_current_branchid()
{
    branch=`git rev-parse --abbrev-ref HEAD`
    echo $branch | sed -e 's|/|_|g'
}

gerrit_submit()
{
    cd_to_root

    # Determine target branch
    target=$(get_upstream)
    reffor=for
    while getopts "b:d" OPTION
    do
        case $OPTION in
            b)
                target=$OPTARG
                ;;
            d)
                reffor=drafts
                echo Submitting as DRAFT
                ;;
        esac
    done

    if ! test -d $DATADIR
    then
        echo "Please run 'git gerrit init' on this repository!"
        exit 1
    fi

    # Add hook - we could do this at "git gerrit init" time, but when using
    # the "repo" tool the hooks directory gets reset on "repo sync" so this
    # is safer
    cat <<'EOF' > .git/hooks/prepare-commit-msg
#!/bin/sh
# Added automatically by git-gerrit
git gerrit prepare-commit-msg $1
EOF
    chmod 755 .git/hooks/prepare-commit-msg

    # Determine current working branch; save for prepare-commit-msg hook
    branch=`git rev-parse --abbrev-ref HEAD`
    branchid=`get_current_branchid`
    echo $branchid > $DATADIR/current_branch

    # Make sure working branch and target are different
    if test "$target" = "$branch"
    then
        echo "Working branch and target are the same - nothing to do!"
        echo "Please make your changes on a dedicated local branch, not master."
        exit 1
    fi

    # Ensure current branch has no uncommitted changes
    git diff-index --quiet HEAD || {
        echo -n "Your current branch has uncommitted changes; please commit all "
        echo "before merging"
        exit 1
    }

    # Logic: Create a temporary branch based on the target
    # branch. Perform a squash merge of the current branch onto the
    # temporary branch, and then push that single commit to gerrit.
    echo Merging changes on top of $target...
    git checkout --quiet -B gerrit-submit $target
    git merge --squash $branch || {
        echo
        echo "Error during merge - try 'git gerrit update' first"
        echo
        git reset --quiet --hard
        git checkout --quiet $branch
        exit 1
    }

    # Make sure there's something to commit!
    git diff-index --quiet HEAD && {
        echo
        echo -n "No changes were merged - make some commits on your branch "
        echo "before submitting!"
        echo
        git reset --quiet --hard
        git checkout --quiet $branch
        exit 1
    }

    echo
    echo "Merge successful - please provide a meaningful commit message"
    echo
    git commit
    git push gerrit HEAD:refs/${reffor}/$target

    # Save commit message for next time, and switch back to working branch
    git log -1 --format=%B --no-color > $DATADIR/msg-$branchid
    git checkout --quiet $branch > /dev/null
}

gen_change_id ()
{
    echo -n I
    {
        # Borrowed in part from the standard Gerrit commit-msg hook
        echo "branch $BRANCH"
        echo "tree `git write-tree`"
        echo "author `git var GIT_AUTHOR_IDENT`"
        echo "committer `git var GIT_COMMITTER_IDENT`"
    } | git hash-object -t blob --stdin
}

prepare_commit_msg()
{
    # Path to commit message so far
    MSG="$1"
    shift

    # Determine current branch name
    # http://stackoverflow.com/questions/6245570/how-to-get-current-branch-name-in-git
    BRANCH=$(git rev-parse --abbrev-ref HEAD)

    # Only do our special magic on the gerrit-submit branch
    if test "$BRANCH" != "gerrit-submit"
    then
        exit
    fi

    # Determine working branch (set by gerrit submit)
    if test -e "$DATADIR/current_branch"
    then
        BRANCH=`cat $DATADIR/current_branch`
    else
        echo "Sorry, something went very wrong..."
        exit 1
    fi

    # Determine active Change-Id for working branch
    if test -e "$DATADIR/id-$BRANCH"
    then
        CHANGE=`cat "$DATADIR/id-$BRANCH"`
        # If this Change-Id already exists in the git log for the *current*
        # branch (the target branch), then Gerrit has already merged it and we
        # should choose a new ID
        if git log --format=full | grep -q $CHANGE
        then
            CHANGE=""
        fi
    fi

    # If no active Change-Id, generate one and save it, and populate the
    # proposed commit message.
    #
    # If there IS an active Change-Id, re-use previous commit message
    # (saved by gerrit submit), which should already include the Change-Id.
    if test -z "$CHANGE"
    then
        CHANGE=`gen_change_id`
        echo $CHANGE > "$DATADIR/id-$BRANCH"

        echo "PLEASE EDIT to provide a meaningful commit message!" > $MSG.new
        echo >> $MSG.new
        echo "The following commits from your working branch will be included:"\
             >> $MSG.new
        echo >> $MSG.new
        # Filter out Change-Id lines from proposed commit message (in case user
        # has standard Gerrit commit-msg hook installed as well)
        grep -v '^    Change-Id:' $MSG \
             | grep -v 'Squashed commit of the following:' >> $MSG.new
        mv $MSG.new $MSG

        # Append new Change-Id
        echo >> $MSG
        echo "# Do not delete the following line!" >> $MSG
        echo "Change-Id: $CHANGE" >> $MSG
    else
        if test -e "$DATADIR/msg-$BRANCH"
        then
            cp $DATADIR/msg-$BRANCH $MSG
        fi
    fi
}

gerrit_new()
{
    cd_to_root
    branchid=`get_current_branchid`
    rm -f $DATADIR/*$branchid
}

# First argument is sub-command
case "$1" in
    "init" )
        shift
        gerrit_init $@
        ;;
    "update" )
        shift
        gerrit_update $@
        ;;
    "submit" )
        shift
        gerrit_submit $@
        ;;
    "new" )
        shift
        gerrit_new $@
        ;;
    "prepare-commit-msg" )
        shift
        prepare_commit_msg $@
        ;;
    * )
        usage
        ;;
esac
